name: technical-tests üöÄ ‚ò∏Ô∏è  üê≥ üêß
on:
  push:
    branches:
      - '*/*'
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master
jobs:
  golang:
    name: Golang Pipline
    runs-on: ubuntu-latest
    steps:

      - name: Set up Go 1.13
        id: setup-go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        id: checkout

      - name: Install Dep
        id: install-dep
        run: |
          echo -e "install \033[0;36mcli\033[0m dependencies ..."
          go get -u golang.org/x/lint/golint
          echo -e "install \033[0;36mcli\033[0m dependencies ... \033[0;32mdone\033[0m"
          echo -e "install \033[0;36mapplication\033[0m packages ..."
          # application packages
          go get
          echo -e "install \033[0;36mapplication\033[0m packages ... \033[0;32mdone\033[0m"

      - name: Generate `info.txt`
        id: generate-info
        run: |
          make info.generate
          echo "##[set-output name=info;]$(cat info.txt | sed "s/%/%25/" | sed -z "s/\\n/%0A/g" | sed -z "s/\\r/%0D/g" )"

      - name: Run test
        id: run-test
        run: |
          GENERATE_INFO=false make go.test

      - name: Build `app`
        id: build-app
        run: |
          GENERATE_INFO=false make go.build
        if: contains(github.ref, 'refs/tags/v') || contains(github.ref, 'refs/heads/master')

      - name: Generate `artifact`
        id: generate-artifact
        run: |
          zip app.zip app info.txt
        if: contains(github.ref, 'refs/tags/v') || contains(github.ref, 'refs/heads/master')

      - name: Calculate Docker Info
        id: calculate-docker-info
        run: |
          GITCLOUD_PROVIDER=github make docker.info
        if: contains(github.ref, 'refs/tags/v') || contains(github.ref, 'refs/heads/master')
          
      - name: Publish to Github Registry
        id: publish-github-registry
        uses: elgohr/Publish-Docker-Github-Action@master
        env:
          GO_VERSION: 1.13
          ALPINE_VERSION: 3.11
        with:
          name: ${{ steps.calculate-docker-info.outputs.repository }}/app2
          registry: docker.pkg.github.com
          username: ${{ steps.calculate-docker-info.outputs.actor }}
          password: ${{ github.token }}
          buildargs: GO_VERSION,ALPINE_VERSION
          tags: ${{ steps.calculate-docker-info.outputs.tags }}
          cache: ${{ github.event_name != 'schedule' }}
        if: contains(github.ref, 'refs/tags/v') || contains(github.ref, 'refs/heads/master')

      - name: Publish to Dockerhub
        id: publish-dockerhub
        uses: elgohr/Publish-Docker-Github-Action@master
        env:
          GO_VERSION: 1.13
          ALPINE_VERSION: 3.11
        with:
          name: ${{ steps.calculate-docker-info.outputs.repository }}
          username: shuliyey
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          buildargs: GO_VERSION,ALPINE_VERSION
          tags: ${{ steps.calculate-docker-info.outputs.tags }}
          cache: ${{ github.event_name != 'schedule' }}
        if: contains(github.ref, 'refs/tags/v') || contains(github.ref, 'refs/heads/master')

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            ${{ steps.generate-info.outputs.info }}
            ```bash
            docker run --rm -p 8000:8000 docker.pkg.github.com/${{ steps.calculate-docker-info.outputs.repository }}/app2:${{ steps.calculate-docker-info.outputs.tag }}
            curl localhost:8000/version
            ```
            ```bash
            docker run --rm -p 8000:8000 ${{ steps.calculate-docker-info.outputs.repository }}:${{ steps.calculate-docker-info.outputs.tag }}
            curl localhost:8000/version
            ```
          draft: false
          prerelease: false
        if: contains(github.ref, 'refs/tags/v')

      - name: Upload `artifact` Asset
        id: upload-artifact-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./app.zip
          asset_name: app.${{ steps.calculate-docker-info.outputs.tag }}.zip
          asset_content_type: application/zip
        if: contains(github.ref, 'refs/tags/v')